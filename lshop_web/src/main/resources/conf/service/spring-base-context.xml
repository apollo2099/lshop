<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
	<!-- ********************************************************************************************************* -->
	<bean id="propertyConfigurer"
		class="com.lshop.common.spring.PropertyPlaceholderConfigurerImpl">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:lshop.properties</value>
				<value>classpath*:gvuc_epg.properties</value>
			</list>
		</property>
	</bean>
	<bean id="txAttributes"
		class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="read*">PROPAGATION_SUPPORTS,-readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,-readOnly</prop>
				<prop key="load*">PROPAGATION_SUPPORTS,-readOnly</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,-readOnly</prop>
				<prop key="cache*">PROPAGATION_SUPPORTS,-readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>
	<bean id="autoProxyCreatorGdasn"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>			
				<value>transactionInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>*Service*</value>
			</list>
		</property>
	</bean>
	 <bean class="com.gv.base.model.spring.ApplicationContextHolder" lazy-init="false"/> 
	<!-- 开启注解配置 -->
	<context:annotation-config />
	<!-- 任务调度器 -->
    <task:scheduler id="scheduler" pool-size="10"/>
    <!-- 任务执行器 -->
    <task:executor id="executor" pool-size="10"/>
    <!--开启注解调度支持 @Async @Scheduled-->
    <task:annotation-driven executor="executor" scheduler="scheduler" />
    
	<!-- 对指定的包进行组件扫描 -->	
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.gv,com.lshop" />
	<import resource="classpath:conf/cxf/cxf-base.xml" />
	<import resource="classpath:conf/ucepg/spring-epg-base.xml" />
	<!-- redisTemplate配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />  
	    <property name="maxIdle" value="${redis.pool.maxIdle}" />  
	    <property name="maxWait" value="${redis.pool.maxWait}" />
    </bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ac.ip}" />
		<property name="port" value="${redis.ac.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" /> 
	</bean>  
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
	</bean>
	
</beans>
